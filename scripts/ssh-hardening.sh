#!/bin/bash

# =============================================================================
# SSH Hardening Script v1.0
# Расширенная настройка безопасности SSH сервера
# =============================================================================

set -euo pipefail

# Цвета для вывода
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
NC='\033[0m'

# Функции логирования
log_info() { echo -e "${CYAN}[INFO]${NC} $1"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
log_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# Проверка прав root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        log_error "Скрипт должен запускаться с правами root"
        exit 1
    fi
}

# Создание резервной копии SSH конфигурации
backup_ssh_config() {
    local ssh_config="/etc/ssh/sshd_config"
    local backup_file="${ssh_config}.backup-$(date +%Y%m%d-%H%M%S)"
    
    if [[ -f "$ssh_config" ]]; then
        cp "$ssh_config" "$backup_file"
        log_success "Резервная копия создана: $backup_file"
    else
        log_error "Файл $ssh_config не найден"
        exit 1
    fi
}

# Генерация усиленной конфигурации SSH
generate_hardened_ssh_config() {
    local ssh_config="/etc/ssh/sshd_config"
    local ssh_port="${1:-22}"
    local allow_users="${2:-}"
    local allow_groups="${3:-sudo}"
    
    log_info "Создание усиленной конфигурации SSH..."
    
    cat > "$ssh_config" << EOF
# =============================================================================
# SSH Server Configuration - Security Hardened
# Generated by SSH Hardening Script v1.0
# Date: $(date)
# =============================================================================

# Basic Settings
Port $ssh_port
Protocol 2
AddressFamily inet

# Listening Settings
ListenAddress 0.0.0.0
#ListenAddress ::

# Host Keys (только современные алгоритмы)
HostKey /etc/ssh/ssh_host_rsa_key
HostKey /etc/ssh/ssh_host_ecdsa_key
HostKey /etc/ssh/ssh_host_ed25519_key

# Kex Algorithms (только безопасные)
KexAlgorithms curve25519-sha256@libssh.org,ecdh-sha2-nistp521,ecdh-sha2-nistp384,ecdh-sha2-nistp256,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512

# Ciphers (только современные)
Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr

# MAC Algorithms (только безопасные)
MACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha2-256,hmac-sha2-512

# Authentication Settings
LoginGraceTime 60
PermitRootLogin no
StrictModes yes
MaxAuthTries 3
MaxSessions 2
MaxStartups 2:30:10

# Public Key Authentication
PubkeyAuthentication yes
AuthorizedKeysFile .ssh/authorized_keys

# Password Authentication (отключено для безопасности)
PasswordAuthentication no
PermitEmptyPasswords no
ChallengeResponseAuthentication no

# Kerberos Authentication (отключено)
KerberosAuthentication no
KerberosOrLocalPasswd no
KerberosTicketCleanup yes

# GSSAPI Authentication (отключено)
GSSAPIAuthentication no
GSSAPICleanupCredentials yes

# PAM Authentication
UsePAM yes

# X11 Forwarding (отключено для безопасности)
X11Forwarding no
X11DisplayOffset 10
X11UseLocalhost yes

# Port Forwarding (ограничено)
AllowTcpForwarding local
AllowStreamLocalForwarding no
GatewayPorts no
PermitTunnel no

# Client Connection Settings
ClientAliveInterval 300
ClientAliveCountMax 2
TCPKeepAlive no
Compression no

# Logging
SyslogFacility AUTH
LogLevel VERBOSE

# chroot and subsystem settings
Subsystem sftp internal-sftp

# User and Group Restrictions
$(if [[ -n "$allow_users" ]]; then echo "AllowUsers $allow_users"; fi)
$(if [[ -n "$allow_groups" ]]; then echo "AllowGroups $allow_groups"; fi)
DenyUsers root
DenyGroups root

# Banner
Banner /etc/ssh/ssh_banner

# Additional Security
PermitUserEnvironment no
AcceptEnv LANG LC_*
PrintMotd no
PrintLastLog yes
UseDNS no
PidFile /var/run/sshd.pid

# Idle timeout
ClientAliveInterval 300
ClientAliveCountMax 0

# Prevent weak algorithms
RekeyLimit 1G 1h
EOF

    log_success "Усиленная конфигурация SSH создана"
}

# Создание SSH баннера
create_ssh_banner() {
    local banner_file="/etc/ssh/ssh_banner"
    
    cat > "$banner_file" << 'EOF'
***************************************************************************
                            WARNING
***************************************************************************
This system is for authorized users only. All activities on this system
are monitored and recorded. By accessing this system, you agree to comply
with all applicable laws and organizational policies.

Unauthorized access is strictly prohibited and may result in criminal
prosecution to the fullest extent of the law.

All connections are logged and monitored.
***************************************************************************
EOF
    
    chmod 644 "$banner_file"
    log_success "SSH баннер создан: $banner_file"
}

# Генерация новых хост-ключей
regenerate_host_keys() {
    log_info "Генерация новых SSH хост-ключей..."
    
    # Удаление старых ключей
    rm -f /etc/ssh/ssh_host_*
    
    # Генерация новых ключей с усиленными параметрами
    ssh-keygen -t rsa -b 4096 -f /etc/ssh/ssh_host_rsa_key -N "" -C "$(hostname)-$(date +%Y%m%d)"
    ssh-keygen -t ecdsa -b 521 -f /etc/ssh/ssh_host_ecdsa_key -N "" -C "$(hostname)-$(date +%Y%m%d)"
    ssh-keygen -t ed25519 -f /etc/ssh/ssh_host_ed25519_key -N "" -C "$(hostname)-$(date +%Y%m%d)"
    
    # Установка правильных прав доступа
    chmod 600 /etc/ssh/ssh_host_*_key
    chmod 644 /etc/ssh/ssh_host_*_key.pub
    
    log_success "Новые SSH хост-ключи сгенерированы"
}

# Настройка двухфакторной аутентификации
setup_2fa() {
    local username="$1"
    
    log_info "Настройка двухфакторной аутентификации для $username..."
    
    # Установка Google Authenticator
    apt-get update
    apt-get install -y libpam-google-authenticator
    
    # Настройка PAM
    if ! grep -q "auth required pam_google_authenticator.so" /etc/pam.d/sshd; then
        sed -i '1i auth required pam_google_authenticator.so' /etc/pam.d/sshd
    fi
    
    # Обновление SSH конфигурации для 2FA
    sed -i 's/ChallengeResponseAuthentication no/ChallengeResponseAuthentication yes/' /etc/ssh/sshd_config
    echo "AuthenticationMethods publickey,keyboard-interactive" >> /etc/ssh/sshd_config
    
    log_success "2FA базовая настройка завершена"
    log_warning "Пользователь $username должен выполнить: google-authenticator"
    log_warning "И сохранить QR-код или секретный ключ в приложении аутентификатора"
}

# Настройка ограничений подключений по IP
setup_ip_restrictions() {
    local allowed_ips="$1"
    
    if [[ -n "$allowed_ips" ]]; then
        log_info "Настройка ограничений по IP адресам..."
        
        # Добавление в SSH конфигурацию
        {
            echo ""
            echo "# IP Address Restrictions"
            for ip in $allowed_ips; do
                echo "Match Address $ip"
                echo "    AllowUsers *"
                echo ""
            done
            echo "Match Address !$allowed_ips"
            echo "    DenyUsers *"
        } >> /etc/ssh/sshd_config
        
        log_success "Ограничения по IP настроены для: $allowed_ips"
    fi
}

# Настройка логирования SSH
setup_ssh_logging() {
    log_info "Настройка расширенного логирования SSH..."
    
    # Создание отдельного лог-файла для SSH
    cat > /etc/rsyslog.d/ssh.conf << EOF
# SSH logging configuration
auth,authpriv.* /var/log/ssh.log
if \$programname == 'sshd' then /var/log/ssh-detailed.log
& stop
EOF
    
    # Настройка logrotate для SSH логов
    cat > /etc/logrotate.d/ssh << EOF
/var/log/ssh.log /var/log/ssh-detailed.log {
    daily
    missingok
    rotate 90
    compress
    delaycompress
    notifempty
    create 640 root adm
    postrotate
        systemctl reload rsyslog
    endscript
}
EOF
    
    systemctl restart rsyslog
    log_success "SSH логирование настроено"
}

# Создание скрипта мониторинга SSH
create_ssh_monitor() {
    local monitor_script="/usr/local/bin/ssh-monitor.sh"
    
    cat > "$monitor_script" << 'EOF'
#!/bin/bash
# SSH Connection Monitor

LOG_FILE="/var/log/ssh-monitor.log"
ALERT_EMAIL=""  # Настройте email для уведомлений

# Функция логирования
log_alert() {
    echo "$(date): $1" >> "$LOG_FILE"
    if [[ -n "$ALERT_EMAIL" ]]; then
        echo "$1" | mail -s "SSH Alert - $(hostname)" "$ALERT_EMAIL"
    fi
}

# Мониторинг неудачных попыток входа
failed_attempts=$(grep "Failed password" /var/log/auth.log | grep "$(date +%b\ %d)" | wc -l)
if [[ $failed_attempts -gt 10 ]]; then
    log_alert "HIGH: $failed_attempts failed SSH login attempts today"
fi

# Мониторинг успешных входов
successful_logins=$(grep "Accepted" /var/log/auth.log | grep "$(date +%b\ %d)" | wc -l)
if [[ $successful_logins -gt 20 ]]; then
    log_alert "INFO: $successful_logins successful SSH logins today"
fi

# Мониторинг подключений с новых IP
new_ips=$(grep "$(date +%b\ %d)" /var/log/auth.log | grep "Accepted" | awk '{print $11}' | sort -u | wc -l)
if [[ $new_ips -gt 3 ]]; then
    log_alert "MEDIUM: SSH connections from $new_ips different IPs today"
fi

# Проверка активных SSH сессий
active_sessions=$(who | grep pts | wc -l)
if [[ $active_sessions -gt 5 ]]; then
    log_alert "MEDIUM: $active_sessions active SSH sessions"
fi
EOF
    
    chmod +x "$monitor_script"
    
    # Добавление в crontab для запуска каждый час
    (crontab -l 2>/dev/null; echo "0 * * * * $monitor_script") | crontab -
    
    log_success "SSH мониторинг настроен: $monitor_script"
}

# Тестирование SSH конфигурации
test_ssh_config() {
    log_info "Тестирование SSH конфигурации..."
    
    if sshd -t; then
        log_success "SSH конфигурация корректна"
        return 0
    else
        log_error "Ошибка в SSH конфигурации"
        return 1
    fi
}

# Применение изменений SSH
apply_ssh_changes() {
    if test_ssh_config; then
        systemctl reload ssh
        log_success "SSH сервис перезагружен с новой конфигурацией"
    else
        log_error "Не удалось применить изменения SSH"
        exit 1
    fi
}

# Показ информации о настройках
show_ssh_info() {
    local ssh_port=$(grep "^Port" /etc/ssh/sshd_config | awk '{print $2}')
    
    echo
    log_info "=== ИНФОРМАЦИЯ О SSH НАСТРОЙКАХ ==="
    echo "SSH порт: ${ssh_port:-22}"
    echo "Root доступ: $(grep "^PermitRootLogin" /etc/ssh/sshd_config | awk '{print $2}')"
    echo "Парольная аутентификация: $(grep "^PasswordAuthentication" /etc/ssh/sshd_config | awk '{print $2}')"
    echo "Публичные ключи: $(grep "^PubkeyAuthentication" /etc/ssh/sshd_config | awk '{print $2}')"
    echo "Максимум попыток: $(grep "^MaxAuthTries" /etc/ssh/sshd_config | awk '{print $2}')"
    echo "Таймаут сессии: $(grep "^ClientAliveInterval" /etc/ssh/sshd_config | awk '{print $2}') секунд"
    
    echo
    log_info "=== АКТИВНЫЕ SSH ПОДКЛЮЧЕНИЯ ==="
    who | grep pts || echo "Нет активных SSH подключений"
    
    echo
    log_info "=== ПОСЛЕДНИЕ SSH СОБЫТИЯ ==="
    tail -5 /var/log/auth.log | grep sshd || echo "Нет недавних SSH событий"
}

# Интерактивная настройка
interactive_setup() {
    log_info "=== ИНТЕРАКТИВНАЯ НАСТРОЙКА SSH БЕЗОПАСНОСТИ ==="
    
    # SSH порт
    read -p "SSH порт [22]: " ssh_port
    ssh_port=${ssh_port:-22}
    
    # Разрешенные пользователи
    read -p "Список разрешенных пользователей (через пробел, пустой = все): " allowed_users
    
    # Разрешенные группы
    read -p "Список разрешенных групп [sudo]: " allowed_groups
    allowed_groups=${allowed_groups:-sudo}
    
    # 2FA
    read -p "Настроить двухфакторную аутентификацию? (y/n) [n]: " setup_2fa_choice
    
    # IP ограничения
    read -p "Ограничить доступ по IP адресам (через пробел, пустой = без ограничений): " allowed_ips
    
    # Регенерация ключей
    read -p "Сгенерировать новые хост-ключи? (y/n) [n]: " regen_keys
    
    # Мониторинг
    read -p "Настроить мониторинг SSH? (y/n) [y]: " setup_monitoring
    setup_monitoring=${setup_monitoring:-y}
    
    echo
    log_info "=== ПОДТВЕРЖДЕНИЕ НАСТРОЕК ==="
    echo "SSH порт: $ssh_port"
    echo "Разрешенные пользователи: ${allowed_users:-все}"
    echo "Разрешенные группы: $allowed_groups"
    echo "2FA: ${setup_2fa_choice:-n}"
    echo "IP ограничения: ${allowed_ips:-нет}"
    echo "Новые ключи: ${regen_keys:-n}"
    echo "Мониторинг: $setup_monitoring"
    
    read -p "Продолжить? (y/n): " confirm
    if [[ ! $confirm =~ ^[Yy]$ ]]; then
        log_info "Настройка отменена"
        exit 0
    fi
    
    # Выполнение настройки
    backup_ssh_config
    
    if [[ $regen_keys =~ ^[Yy]$ ]]; then
        regenerate_host_keys
    fi
    
    generate_hardened_ssh_config "$ssh_port" "$allowed_users" "$allowed_groups"
    create_ssh_banner
    setup_ssh_logging
    
    if [[ -n "$allowed_ips" ]]; then
        setup_ip_restrictions "$allowed_ips"
    fi
    
    if [[ $setup_monitoring =~ ^[Yy]$ ]]; then
        create_ssh_monitor
    fi
    
    apply_ssh_changes
    
    if [[ $setup_2fa_choice =~ ^[Yy]$ ]] && [[ -n "$allowed_users" ]]; then
        for user in $allowed_users; do
            if id "$user" &>/dev/null; then
                setup_2fa "$user"
            fi
        done
    fi
    
    show_ssh_info
}

# Быстрая настройка с параметрами по умолчанию
quick_setup() {
    local ssh_port="${1:-22}"
    local username="${2:-}"
    
    log_info "=== БЫСТРАЯ НАСТРОЙКА SSH БЕЗОПАСНОСТИ ==="
    
    backup_ssh_config
    generate_hardened_ssh_config "$ssh_port" "$username" "sudo"
    create_ssh_banner
    setup_ssh_logging
    create_ssh_monitor
    apply_ssh_changes
    
    log_success "Быстрая настройка завершена"
    show_ssh_info
}

# Проверка безопасности SSH
security_audit() {
    log_info "=== АУДИТ БЕЗОПАСНОСТИ SSH ==="
    
    local issues=0
    
    # Проверка порта
    local ssh_port=$(grep "^Port" /etc/ssh/sshd_config | awk '{print $2}')
    if [[ "$ssh_port" == "22" ]]; then
        log_warning "SSH использует стандартный порт 22"
        ((issues++))
    else
        log_success "SSH использует нестандартный порт: $ssh_port"
    fi
    
    # Проверка root доступа
    local root_login=$(grep "^PermitRootLogin" /etc/ssh/sshd_config | awk '{print $2}')
    if [[ "$root_login" != "no" ]]; then
        log_warning "Root доступ через SSH не отключен: $root_login"
        ((issues++))
    else
        log_success "Root доступ через SSH отключен"
    fi
    
    # Проверка парольной аутентификации
    local password_auth=$(grep "^PasswordAuthentication" /etc/ssh/sshd_config | awk '{print $2}')
    if [[ "$password_auth" != "no" ]]; then
        log_warning "Парольная аутентификация включена"
        ((issues++))
    else
        log_success "Парольная аутентификация отключена"
    fi
    
    # Проверка пустых паролей
    local empty_passwords=$(grep "^PermitEmptyPasswords" /etc/ssh/sshd_config | awk '{print $2}')
    if [[ "$empty_passwords" != "no" ]]; then
        log_warning "Пустые пароли могут быть разрешены"
        ((issues++))
    else
        log_success "Пустые пароли запрещены"
    fi
    
    # Проверка X11 forwarding
    local x11_forward=$(grep "^X11Forwarding" /etc/ssh/sshd_config | awk '{print $2}')
    if [[ "$x11_forward" != "no" ]]; then
        log_warning "X11 Forwarding включен"
        ((issues++))
    else
        log_success "X11 Forwarding отключен"
    fi
    
    # Проверка максимального количества попыток
    local max_auth_tries=$(grep "^MaxAuthTries" /etc/ssh/sshd_config | awk '{print $2}')
    if [[ -z "$max_auth_tries" ]] || [[ "$max_auth_tries" -gt 3 ]]; then
        log_warning "MaxAuthTries не настроен или слишком высокий: ${max_auth_tries:-не установлен}"
        ((issues++))
    else
        log_success "MaxAuthTries настроен корректно: $max_auth_tries"
    fi
    
    # Проверка алгоритмов шифрования
    if grep -q "Ciphers" /etc/ssh/sshd_config; then
        log_success "Алгоритмы шифрования настроены"
    else
        log_warning "Алгоритмы шифрования используют значения по умолчанию"
        ((issues++))
    fi
    
    # Проверка хост-ключей
    local key_count=0
    [[ -f "/etc/ssh/ssh_host_rsa_key" ]] && ((key_count++))
    [[ -f "/etc/ssh/ssh_host_ecdsa_key" ]] && ((key_count++))
    [[ -f "/etc/ssh/ssh_host_ed25519_key" ]] && ((key_count++))
    
    if [[ $key_count -lt 2 ]]; then
        log_warning "Недостаточно хост-ключей: $key_count"
        ((issues++))
    else
        log_success "Хост-ключи присутствуют: $key_count"
    fi
    
    # Проверка активных сессий
    local active_sessions=$(who | grep pts | wc -l)
    if [[ $active_sessions -gt 10 ]]; then
        log_warning "Много активных SSH сессий: $active_sessions"
    else
        log_success "Нормальное количество SSH сессий: $active_sessions"
    fi
    
    # Проверка неудачных попыток входа за последний час
    local failed_attempts=$(grep "Failed password" /var/log/auth.log | grep "$(date +%b\ %d\ %H)" | wc -l)
    if [[ $failed_attempts -gt 5 ]]; then
        log_warning "Много неудачных попыток входа за последний час: $failed_attempts"
    else
        log_success "Нормальное количество неудачных попыток: $failed_attempts"
    fi
    
    echo
    log_info "=== РЕЗУЛЬТАТ АУДИТА ==="
    if [[ $issues -eq 0 ]]; then
        log_success "Серьезных проблем безопасности не обнаружено"
    else
        log_warning "Обнаружено проблем безопасности: $issues"
        log_info "Рекомендуется запустить усиленную настройку SSH"
    fi
    
    return $issues
}

# Функция помощи
show_help() {
    cat << EOF
SSH Hardening Script v1.0

ИСПОЛЬЗОВАНИЕ:
    $0 [КОМАНДА] [ПАРАМЕТРЫ]

КОМАНДЫ:
    interactive     - Интерактивная настройка SSH безопасности
    quick [PORT] [USER] - Быстрая настройка (порт и пользователь опциональны)
    audit          - Аудит текущих настроек безопасности SSH
    info           - Показать информацию о текущих настройках SSH
    backup         - Создать резервную копию SSH конфигурации
    monitor        - Настроить только мониторинг SSH
    help           - Показать эту справку

ПРИМЕРЫ:
    $0 interactive                    # Интерактивная настройка
    $0 quick 2222 myuser             # Быстрая настройка на порту 2222 для пользователя myuser
    $0 audit                         # Проверка безопасности
    $0 info                          # Информация о настройках

ОПЦИИ:
    Все опции настраиваются интерактивно или через параметры команд

БЕЗОПАСНОСТЬ:
    - Отключение root доступа
    - Отключение парольной аутентификации
    - Использование только современных алгоритмов шифрования
    - Ограничение количества попыток входа
    - Настройка таймаутов соединения
    - Детальное логирование
    - Мониторинг подозрительной активности

ВНИМАНИЕ:
    Перед применением изменений убедитесь, что у вас есть альтернативный
    способ доступа к серверу (консоль, VNC и т.д.) на случай проблем с SSH.
EOF
}

# Главная функция
main() {
    check_root
    
    case "${1:-interactive}" in
        "interactive"|"i")
            interactive_setup
            ;;
        "quick"|"q")
            quick_setup "${2:-22}" "${3:-}"
            ;;
        "audit"|"a")
            security_audit
            ;;
        "info"|"status")
            show_ssh_info
            ;;
        "backup"|"b")
            backup_ssh_config
            ;;
        "monitor"|"m")
            create_ssh_monitor
            log_success "SSH мониторинг настроен"
            ;;
        "help"|"h"|"-h"|"--help")
            show_help
            ;;
        *)
            log_error "Неизвестная команда: $1"
            echo "Используйте '$0 help' для справки"
            exit 1
            ;;
    esac
}

# Обработка сигналов
trap 'log_error "Скрипт прерван"; exit 1' INT TERM

# Запуск если скрипт вызван напрямую
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
